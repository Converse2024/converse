package pages

import (
	"github.com/Sourjaya/converse/app/templates/layouts"
	v "github.com/Sourjaya/converse/app/validate"
	"github.com/Sourjaya/converse/app/templates/errorComponent"
)

type RegisterPageData struct {
	FormValues RegisterFormValues
	FormErrors v.Errors
}

type RegisterFormValues struct {
	Email           string `form:"email"`
	FirstName       string `form:"firstName"`
	LastName        string `form:"lastName"`
	Password        string `form:"password"`
	PasswordConfirm string `form:"passwordConfirm"`
}

templ Register(data RegisterPageData) {
	@layouts.App() {
		<div class="w-full justify-center">
			<div class="mt-10 lg:mt-20">
				<img
					src="public/assets/favicon_light/android-chrome-192x192.png"
					alt="Light Logo"
					class="max-w-sm mx-auto px-6 pb-1 md:pb-4 size-32 object-contain"
					x-show="theme === 'dark'"
				/>
				<img
					src="public/assets/favicon_dark/android-chrome-192x192.png"
					alt="Dark Logo"
					class="max-w-sm mx-auto px-6 pb-1 md:pb-4 size-32 object-contain"
					x-show="theme === 'light'"
				/>
				<div id="register-card" class="max-w-sm mx-auto sm:border sm:rounded-md sm:shadow-sm py-12 px-6 flex flex-col gap-8">
					<h2 class="text-center text-2xl font-medium">Signup</h2>
					@RegisterForm(data.FormValues, data.FormErrors)
				</div>
			</div>
		</div>
	}
}

templ RegisterForm(values RegisterFormValues, errors v.Errors) {
	<form id="registrationform" hx-post="/registration?page=1" class="slide-transition flex flex-col gap-4" hx-swap="outerHTML transition:true" hx-indicator=".progress">
		<div id="swap">
			<div hx-target="#swap" hx-swap="outerHTML" class="input-group flex flex-col gap-1">
				<input
					hx-post="/registration?check=email"
					{ inputAttrs(errors.Has("email"))... }
					name="email"
					id="email"
					value={ values.Email }
					required
					autocomplete="email"
				/>
				<label
					for="email"
				>Email </label>
			</div>
			if errors.Has("email") {
				<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
			}
		</div>
		<button id="submit1" disabled { buttonAttrs("submit1")... }>
			Signup
		</button>
		<div class="flex flex-row items-center justify-center text-center text-sm font-medium space-x-1 text-gray-500">
			<p>Already have an account?</p> <a class="flex flex-row items-center text-blue-600" href="/login" target="" rel="noopener noreferrer">Login</a>
		</div>
	</form>
	<script>
		function checkErrors() {
			let hasErrors = false;
			const errorElements = document.querySelectorAll('.text-red-500.text-xs');
			const emailInput = document.getElementById('email').value;
			errorElements.forEach((errorElement) => {
				if (errorElement.innerText.trim() !== '' || emailInput=="") {
					hasErrors = true;
				}
			});
			
			const submitButton = document.getElementById('submit1');
			submitButton.disabled = hasErrors;
		}

		//Run checkErrors after any HTMX request to set the correct state after updates
		const afterRequestListener = (event) => {
  		checkErrors();
		};
		document.addEventListener('htmx:afterRequest', afterRequestListener);
		function removeAfterRequestListener() {
  		document.removeEventListener('htmx:afterRequest', afterRequestListener);
  		//console.log('htmx:afterRequest listener removed');
		}
	</script>
}

templ Otp(err error) {
	if err!=nil {
		@errorComponent.Error500Component()
	} else {
		<div hx-target="this" class="slide-transition" hx-swap="outerHTML transition:true">
			<header class="flex flex-col items-center justify-center text-8xl">
				<i class="bx bx-check-shield"></i>
			</header>
			<div class="flex flex-row items-center justify-center text-sm font-medium text-inherit p-4">
				<p>We have sent a code to your email</p>
			</div>
			<form hx-post="/registration?page=2" class="flex flex-col gap-4" hx-indicator=".progress">
				<div class="flex flex-col space-y-16">
					<div class="flex flex-row items-center justify-between mx-auto w-full max-w-xs">
						<input name="otp1" maxlength="1" class="w-16 h-16 py-0.5 flex flex-col items-center justify-center text-center px-5 outline-none rounded-2xl border-2 border-solid text-lg bg-inherit focus:border-cyan-300 focus:ring-1 ring-blue-700" type="text" name="" id=""/>
						<input name="otp2" maxlength="1" disabled class="w-16 h-16 py-0.5 flex flex-col items-center justify-center text-center px-5 outline-none rounded-2xl border-2 border-solid text-lg bg-inherit focus:border-cyan-300 focus:ring-1 ring-blue-700" type="text" name="" id=""/>
						<input name="otp3" maxlength="1" disabled class="w-16 h-16 py-0.5 flex flex-col items-center justify-center text-center px-5 outline-none rounded-2xl border-2 border-solid text-lg bg-inherit focus:border-cyan-300 focus:ring-1 ring-blue-700" type="text" name="" id=""/>
						<input name="otp4" maxlength="1" disabled class="w-16 h-16 py-0.5 flex flex-col items-center justify-center text-center px-5 outline-none rounded-2xl border-2 border-solid text-lg bg-inherit focus:border-cyan-300 focus:ring-1 ring-blue-700" type="text" name="" id=""/>
					</div>
					<div class="flex flex-col space-y-5">
						<div class="flex flex-col items-center justify-center">
							<button id="submit2" { buttonAttrs("submit2")... }>
								Enter OTP
							</button>
						</div>
						<div class="flex flex-row items-center justify-center text-center text-sm font-medium space-x-1 text-gray-500">
							<p>Didn't recieve code?</p> <a hx-post="/registration?check=resendOTP" hx-target="#resend" hx-indicator=".progress" hx-swap="outerHTML" id="resend" class="pointer-events-none cursor-default flex flex-row items-center text-blue-600" rel="noopener noreferrer">Resend in<span class="flex flex-row items-center text-blue-600 ml-1" id="countdown" style="display: none;"></span></a>
						</div>
					</div>
				</div>
			</form>
		</div>
		<script>
	removeAfterRequestListener()
	 const inputs = document.querySelectorAll("input"),
  button = document.querySelector("button");

// iterate over all inputs
inputs.forEach((input, index1) => {
  input.addEventListener("keyup", (e) => {
    // This code gets the current input element and stores it in the currentInput variable
    // This code gets the next sibling element of the current input element and stores it in the nextInput variable
    // This code gets the previous sibling element of the current input element and stores it in the prevInput variable
    const currentInput = input,
      nextInput = input.nextElementSibling,
      prevInput = input.previousElementSibling;
    // if the next input is disabled and the current value is not empty
    //  enable the next input and focus on it
    if (nextInput && nextInput.hasAttribute("disabled") && currentInput.value !== "") {
      nextInput.removeAttribute("disabled");
      nextInput.focus();
    }

    // if the backspace key is pressed
    if (e.key === "Backspace") {
      // iterate over all inputs again
      inputs.forEach((input, index2) => {
        // if the index1 of the current input is less than or equal to the index2 of the input in the outer loop
        // and the previous element exists, set the disabled attribute on the input and focus on the previous element
        if (index1 <= index2 && prevInput) {
          input.setAttribute("disabled", true);
          input.value = "";
          prevInput.focus();
        }
      });
    }
    //if the fourth input( which index number is 3) is not empty and has not disable attribute then
    //add active class if not then remove the active class.
    if (!inputs[3].disabled && inputs[3].value !== "") {
      button.classList.remove("pointer-events-none");
			button.innerText="Verify OTP"
      return;
    }
		button.innerText="Enter OTP"
    button.classList.add("pointer-events-none");
  });
});
let countdownTimer;
function startCountdown(duration) {
			//console.log("timer started")
      var timer = duration, minutes, seconds;
      var countdown = document.getElementById("countdown");
      countdown.style.display = "inline-block"; // Display countdown

			clearInterval(countdownTimer);
			// window.addEventListener('htmx:afterSettle',()=>{
			// 	clearInterval(countdownTimer);
			// });
     countdownTimer =  setInterval(function () {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);
        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;
        countdown.textContent = minutes + ":" + seconds;
        countdown.textContent = minutes + ":" + seconds;
				//console.log(timer)
        if (--timer < 0) {
          clearInterval(countdownTimer);
				  var resend = document.getElementById("resend");
					resend.classList.remove("pointer-events-none", "cursor-default");
					resend.classList.add("pointer-events-auto", "cursor-pointer");
					resend.textContent="Resend"
          countdown.style.display = "none";
        }
      }, 1000);
    }
		const otpRequestListener=()=>{
			inputs[0].focus();
			startCountdown(120);
		} 
//focus the first input which index is 0 on window load
		window.addEventListener("htmx:afterSettle", otpRequestListener);
		function removeOTPRequestListener() {
  		window.removeEventListener('htmx:afterSettle', otpRequestListener);
			clearInterval(countdownTimer)
  		//console.log('htmx:afterSettle listener removed');
		}
	</script>
	}
}

templ Details(err error) {
	if err!=nil {
		@errorComponent.Error500Component()
	} else {
		<div class="slide-transition">
			Hello
		</div>
	}
	<script>
	removeOTPRequestListener();
	</script>
}

templ EmailInput(values RegisterFormValues, errors v.Errors) {
	<div id="swap">
		<div hx-target="#swap" hx-swap="outerHTML" class="input-group flex flex-col gap-1">
			<input
				hx-post="/registration?check=email"
				{ inputAttrs(errors.Has("email"))... }
				name="email"
				id="email"
				value={ values.Email }
				required
				autocomplete="email"
			/>
			<label
				for="email"
			>Email </label>
		</div>
		if errors.Has("email") {
			<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
		}
	</div>
}

templ Resend() {
	<a hx-post="/registration?check=resendOTP" hx-target="#resend" hx-swap="outerHTML" hx-indicator=".progress" id="resend" class="pointer-events-none cursor-default flex flex-row items-center text-blue-600" rel="noopener noreferrer">Resend in <span class="flex flex-row items-center text-blue-600 ml-1" id="countdown" style="display: none;"></span></a>
}

templ SignupForm(values RegisterFormValues, errors v.Errors) {
	<form hx-post="/signup" class="flex flex-col gap-4">
		<div class="flex flex-col gap-1">
			<label
				for="email"
				{ labelAttrs(errors.Has("email"))... }
			>Email *</label>
			<input { inputAttrs(errors.Has("email"))... } name="email" id="email" value={ values.Email }/>
			if errors.Has("email") {
				<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="firstName">First Name *</label>
			<input { inputAttrs(errors.Has("firstName"))... } name="firstName" id="firstName" value={ values.FirstName }/>
			if errors.Has("firstName") {
				<ul class="list-disc ml-4">
					for _, err := range errors.Get("firstName") {
						<li class="text-red-500 text-xs">{ err }</li>
					}
				</ul>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="lastName">Last Name *</label>
			<input { inputAttrs(errors.Has("lastName"))... } name="lastName" id="lastName" value={ values.LastName }/>
			if errors.Has("lastName") {
				<ul class="lsit-disc ml-4">
					for _, err := range errors.Get("lastName") {
						<li class="text-red-500 text-xs">{ err }</li>
					}
				</ul>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="password">Password *</label>
			<input { inputAttrs(errors.Has("password"))... } type="password" name="password" id="password"/>
			if errors.Has("password") {
				<ul>
					for _, err := range errors.Get("password") {
						<li class="text-red-500 text-xs">{ err }</li>
					}
				</ul>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="passwordConfirm">Confirm Password *</label>
			<input { inputAttrs(errors.Has("passwordConfirm"))... } type="password" name="passwordConfirm" id="passwordConfirm"/>
			if errors.Has("passwordConfirm") {
				<div class="text-red-500 text-xs">{ errors.Get("passwordConfirm")[0] }</div>
			}
		</div>
		<button { buttonAttrs("submit1")... }>
			Signup
		</button>
	</form>
}

templ ConfirmEmail(email string) {
	<div class="text-sm">An email confirmation link has been sent to: <span class="underline font-medium">{ email }</span></div>
}
