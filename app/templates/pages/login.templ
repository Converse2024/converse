package pages

import (
	"github.com/Sourjaya/converse/app/templates/layouts"
	"github.com/Sourjaya/converse/app/validate"
)

type LoginPageData struct {
	FormValues LoginFormValues
	FormErrors validate.Errors
}

type LoginFormValues struct {
	Email    string `form:"email"`
	Password string `form:"password"`
}

templ Login(data LoginPageData, registerURL string) {
	@layouts.App() {
		// <div class="fixed top-6 right-6">
		// @components.ThemeSwitcher()
		// </div>
		<div class="w-full justify-center gap-10">
			<div class="mt-10 lg:mt-20">
				<img
					src="public/assets/favicon_light/android-chrome-192x192.png"
					alt="Light Logo"
					class="max-w-sm mx-auto px-6 pb-1 md:pb-4 size-32 object-contain"
					x-show="theme === 'dark'"
				/>
				<img
					src="public/assets/favicon_dark/android-chrome-192x192.png"
					alt="Dark Logo"
					class="max-w-sm mx-auto px-6 pb-1 md:pb-4 size-32 object-contain"
					x-show="theme === 'light'"
				/>
				<div class="max-w-sm  mx-auto sm:border sm:rounded-md sm:shadow-sm py-12 px-8 flex flex-col gap-8">
					<h2 class="text-center text-2xl font-medium">Login</h2>
					@LoginForm(data.FormValues, data.FormErrors)
					<a class="text-sm underline" href="/register">Don't have an account? Signup here.</a>
				</div>
			</div>
		</div>
	}
}

templ LoginForm(values LoginFormValues, errors validate.Errors) {
	<form hx-post="/login" class="flex flex-col gap-4">
		<div class="flex flex-col gap-1">
			<label for="email">Email *</label>
			<input { inputAttrs(errors.Has("email"))... } name="email" id="email" value={ values.Email }/>
			if errors.Has("email") {
				<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="password">Password *</label>
			<input { inputAttrs(errors.Has("password"))... } type="password" name="password" id="password"/>
			if errors.Has("password") {
				<ul class="list-disc ml-4">
					for _, err := range errors.Get("password") {
						<li class="text-red-500 text-xs">password { err }</li>
					}
				</ul>
			}
			if errors.Has("credentials") {
				<div class="text-red-500 text-xs">{ errors.Get("credentials")[0] }</div>
			}
			if errors.Has("verified") {
				<div class="text-red-500 text-xs">{ errors.Get("verified")[0] }</div>
			}
		</div>
		// <button { buttonAttrs("")... }>
		// 	Login
		// </button>
	</form>
}

func labelAttrs(hasError bool) templ.Attributes {
	class := "absolute top-2/4 left-[15px] pt-0 pr-[5px] -translate-y-2/4 pointer-events-none transition-[time-1]"
	if hasError {
		class += " text-red-500"
	}
	return templ.Attributes{
		"class": class,
	}
}

func buttonAttrs(hasError bool, id string) templ.Attributes {
	class := "inline-flex text-primary-foreground items-center justify-center px-4 py-2 text-sm tracking-wide transition-colors duration-200 rounded-md bg-primary text-foreground hover:bg-primary/90 font-bold focus:ring focus:ring-primary focus:shadow-outline focus:outline-none"
	if id == "submit2" || hasError {
		class += " pointer-events-none"
	}
	return templ.Attributes{
		"class": class,
	}
}

func inputAttrs(hasError bool) templ.Attributes {
	class := "z-[1111] flex w-full px-3 py-2 bg-transparent text-sm border rounded-md ring-offset-background placeholder:text-neutral-500 focus:border-neutral-300 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
	if hasError {
		class += " border-red-500"
	} else {
		class += " border-input"
	}
	return templ.Attributes{
		"class": class,
	}
}
